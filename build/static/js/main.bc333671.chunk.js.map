{"version":3,"sources":["app.js","index.js"],"names":["Msg","union","init","tracks","startTrack","endTrack","isJSON","update","msg","model","match","AddTrack","date","Date","toISOString","newTrack","name","Object","objectSpread","concat","toConsumableArray","RemoveTrack","filter","track","SetTrackName","_ref","map","SetStartTrack","SetEndTrack","ToggleJSON","view","dispatch","duration","diff","Math","abs","valueOf","moment","react_default","a","createElement","onClick","asSeconds","asMinutes","asHours","JSON","stringify","style","width","key","type","value","onChange","e","target","textAlign","format","fromNow","App","program","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc333671.chunk.js","sourcesContent":["import React from 'react'\nimport moment from 'moment'\nimport { union } from 'tagmeme'\n\nconst Msg = union([\n  'AddTrack',\n  'RemoveTrack',\n  'SetTrackName',\n  'SetStartTrack',\n  'SetEndTrack',\n  'ToggleJSON'\n])\n\nconst init = [\n  {\n    tracks: [],\n    startTrack: null,\n    endTrack: null,\n    isJSON: false\n  }\n]\n\nconst update = (msg, model) => {\n  const newModel = Msg.match(msg, {\n    AddTrack () {\n      const date = new Date().toISOString()\n      const newTrack = { date, name: date }\n      return { ...model, tracks: [newTrack, ...model.tracks] }\n    },\n    RemoveTrack (date) {\n      return {\n        ...model,\n        tracks: model.tracks.filter(track => track.date !== date)\n      }\n    },\n    SetTrackName ({ date, name }) {\n      return {\n        ...model,\n        tracks: model.tracks.map(track =>\n          track.date === date ? { ...track, name } : track\n        )\n      }\n    },\n    SetStartTrack (date) {\n      return { ...model, startTrack: date }\n    },\n    SetEndTrack (date) {\n      return { ...model, endTrack: date }\n    },\n    ToggleJSON () {\n      return { ...model, isJSON: !model.isJSON }\n    }\n  })\n\n  return [newModel]\n}\n\nconst view = (model, dispatch) => {\n  let duration\n  if (model.startTrack && model.endTrack) {\n    const diff = Math.abs(\n      new Date(model.startTrack).valueOf() - new Date(model.endTrack).valueOf()\n    )\n\n    duration = moment.duration(diff)\n  }\n\n  return (\n    <div>\n      <fieldset>\n        <button onClick={() => dispatch(Msg.AddTrack())}>\n          Record current time\n        </button>\n        <button onClick={() => dispatch(Msg.ToggleJSON())}>Toggle JSON</button>\n      </fieldset>\n      {duration && (\n        <fieldset>\n          <p>Seconds: {duration.asSeconds()}</p>\n          <p>Minutes: {duration.asMinutes()}</p>\n          <p>Hours: {duration.asHours()}</p>\n        </fieldset>\n      )}\n      {model.isJSON ? (\n        <pre>{JSON.stringify(model.tracks, null, 2)}</pre>\n      ) : (\n        <fieldset>\n          <table style={{ width: '100%' }}>\n            <thead>\n              <tr>\n                <th>A</th>\n                <th>B</th>\n                <th>Name</th>\n                <th>Time</th>\n              </tr>\n            </thead>\n            <tbody>\n              {model.tracks.map(track => (\n                <tr key={track.date}>\n                  <td style={{ width: '0%' }}>\n                    <button\n                      onClick={() => dispatch(Msg.SetStartTrack(track.date))}\n                    >\n                      {track.date === model.startTrack ? 'A' : '-'}\n                    </button>\n                  </td>\n                  <td style={{ width: '0%' }}>\n                    <button\n                      onClick={() => dispatch(Msg.SetEndTrack(track.date))}\n                    >\n                      {track.date === model.endTrack ? 'B' : '-'}\n                    </button>\n                  </td>\n                  <td style={{ width: '50%' }}>\n                    <input\n                      type='text'\n                      value={track.name}\n                      style={{ width: '100%' }}\n                      onChange={e =>\n                        dispatch(\n                          Msg.SetTrackName({\n                            date: track.date,\n                            name: e.target.value\n                          })\n                        )\n                      }\n                    />\n                  </td>\n                  <td style={{ width: '50%', textAlign: 'center' }}>\n                    <p>\n                      {moment(track.date).format('hh:mm:ss:SSSS')}\n                      {'â€”'}\n                      {moment(track.date).fromNow()}\n                    </p>\n                  </td>\n                  <td>\n                    <button\n                      onClick={() => dispatch(Msg.RemoveTrack(track.date))}\n                    >\n                      Remove\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </fieldset>\n      )}\n    </div>\n  )\n}\n\nexport function makeProgram () {\n  return {\n    init,\n    update,\n    view\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { program } from 'raj-react'\nimport { makeProgram } from './app'\n\nconst App = program(React.Component, makeProgram)\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}